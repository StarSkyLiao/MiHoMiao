//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/C#Library/MiHoMiao/MiHoMiao.Migxn/Antlr/Definition/MigxnStmt.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace MiHoMiao.Migxn.Antlr.Generated;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMigxnStmtListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MigxnStmtBaseListener : IMigxnStmtListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStmt([NotNull] MigxnStmt.BlockStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStmt([NotNull] MigxnStmt.BlockStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VarStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarStmt([NotNull] MigxnStmt.VarStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VarStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarStmt([NotNull] MigxnStmt.VarStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ValStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValStmt([NotNull] MigxnStmt.ValStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ValStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValStmt([NotNull] MigxnStmt.ValStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] MigxnStmt.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] MigxnStmt.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfElseStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseStmt([NotNull] MigxnStmt.IfElseStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfElseStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseStmt([NotNull] MigxnStmt.IfElseStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStmt([NotNull] MigxnStmt.WhileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStmt([NotNull] MigxnStmt.WhileStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LoopStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoopStmt([NotNull] MigxnStmt.LoopStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LoopStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoopStmt([NotNull] MigxnStmt.LoopStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStmt([NotNull] MigxnStmt.ReturnStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStmt([NotNull] MigxnStmt.ReturnStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStmt([NotNull] MigxnStmt.AssignStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignStmt</c>
	/// labeled alternative in <see cref="MigxnStmt.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStmt([NotNull] MigxnStmt.AssignStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpr([NotNull] MigxnStmt.BinaryExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpr([NotNull] MigxnStmt.BinaryExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesesExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesesExpr([NotNull] MigxnStmt.ParenthesesExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesesExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesesExpr([NotNull] MigxnStmt.ParenthesesExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SingleExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSingleExpr([NotNull] MigxnStmt.SingleExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleExpr</c>
	/// labeled alternative in <see cref="MigxnStmt.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSingleExpr([NotNull] MigxnStmt.SingleExprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
