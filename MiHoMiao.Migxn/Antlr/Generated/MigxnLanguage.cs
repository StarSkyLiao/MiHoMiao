//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/C#Library/MiHoMiao/MiHoMiao.Migxn/Antlr/Definition/MigxnLanguage.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace MiHoMiao.Migxn.Antlr.Generated;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MigxnLanguage : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Space=1, MultiLineComment=2, SingleLineComment=3, Integer=4, Float=5, 
		Char=6, String=7, Var=8, Val=9, Let=10, Fun=11, If=12, Else=13, Loop=14, 
		While=15, Return=16, Name=17, Pow=18, Dot=19, Comma=20, Colon=21, SemiColon=22, 
		LRound=23, RRound=24, LCurly=25, RCurly=26, Arrow=27, Eql=28, Ueql=29, 
		Cgt=30, Cge=31, Clt=32, Cle=33, Assign=34, Add=35, Sub=36, Mul=37, Div=38, 
		Rem=39, LBRACKET=40, RBRACKET=41;
	public const int
		RULE_language = 0, RULE_method = 1, RULE_statement = 2, RULE_expression = 3;
	public static readonly string[] ruleNames = {
		"language", "method", "statement", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'var'", "'val'", "'let'", 
		"'fun'", "'if'", "'else'", "'loop'", "'while'", "'ret'", null, "'**'", 
		"'.'", "','", "':'", "';'", "'('", "')'", "'{'", "'}'", "'->'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Space", "MultiLineComment", "SingleLineComment", "Integer", "Float", 
		"Char", "String", "Var", "Val", "Let", "Fun", "If", "Else", "Loop", "While", 
		"Return", "Name", "Pow", "Dot", "Comma", "Colon", "SemiColon", "LRound", 
		"RRound", "LCurly", "RCurly", "Arrow", "Eql", "Ueql", "Cgt", "Cge", "Clt", 
		"Cle", "Assign", "Add", "Sub", "Mul", "Div", "Rem", "LBRACKET", "RBRACKET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MigxnLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MigxnLanguage() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MigxnLanguage(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MigxnLanguage(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LanguageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public LanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_language; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanguageContext language() {
		LanguageContext _localctx = new LanguageContext(Context, State);
		EnterRule(_localctx, 0, RULE_language);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public IToken FuncName;
		public IToken ReturnType;
		public StatementContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fun() { return GetToken(MigxnLanguage.Fun, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MigxnLanguage.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(MigxnLanguage.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(MigxnLanguage.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(MigxnLanguage.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 2, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			Match(Fun);
			State = 11;
			_localctx.FuncName = Match(Name);
			State = 12;
			Match(LRound);
			State = 13;
			Match(RRound);
			State = 14;
			Match(Colon);
			State = 15;
			_localctx.ReturnType = Match(Name);
			State = 16;
			Match(Arrow);
			State = 17;
			_localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public ExpressionContext Condition;
		public StatementContext TrueBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MigxnLanguage.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarStmtContext : StatementContext {
		public IToken VarName;
		public ExpressionContext Expression;
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(MigxnLanguage.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MigxnLanguage.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(MigxnLanguage.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(MigxnLanguage.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MigxnLanguage.Colon, 0); }
		public VarStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterVarStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitVarStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStmtContext : StatementContext {
		public ExpressionContext LoopTimes;
		public StatementContext LoopBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Loop() { return GetToken(MigxnLanguage.Loop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LoopStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterLoopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitLoopStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : StatementContext {
		public ExpressionContext Condition;
		public StatementContext TrueBody;
		public StatementContext FalseBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(MigxnLanguage.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(MigxnLanguage.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfElseStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public ExpressionContext Condition;
		public StatementContext WhileBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(MigxnLanguage.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStmtContext : StatementContext {
		public ExpressionContext Left;
		public IToken op;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MigxnLanguage.Assign, 0); }
		public AssignStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public StatementContext Children;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCurly() { return GetToken(MigxnLanguage.LCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCurly() { return GetToken(MigxnLanguage.RCurly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public ExpressionContext Result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(MigxnLanguage.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValStmtContext : StatementContext {
		public IToken VarName;
		public ExpressionContext Expression;
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Val() { return GetToken(MigxnLanguage.Val, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(MigxnLanguage.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(MigxnLanguage.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(MigxnLanguage.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(MigxnLanguage.Colon, 0); }
		public ValStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterValStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitValStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 19;
				Match(LCurly);
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 42193712L) != 0)) {
					{
					{
					State = 20;
					((BlockStmtContext)_localctx).Children = statement();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 26;
				Match(RCurly);
				}
				break;
			case 2:
				_localctx = new VarStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				Match(Var);
				State = 28;
				((VarStmtContext)_localctx).VarName = Match(Name);
				State = 29;
				Match(Assign);
				State = 30;
				((VarStmtContext)_localctx).Expression = expression(0);
				}
				break;
			case 3:
				_localctx = new VarStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 31;
				Match(Var);
				State = 32;
				((VarStmtContext)_localctx).VarName = Match(Name);
				State = 33;
				Match(Colon);
				State = 34;
				((VarStmtContext)_localctx).Type = Match(Name);
				}
				break;
			case 4:
				_localctx = new VarStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 35;
				Match(Var);
				State = 36;
				((VarStmtContext)_localctx).VarName = Match(Name);
				State = 37;
				Match(Colon);
				State = 38;
				((VarStmtContext)_localctx).Type = Match(Name);
				State = 39;
				Match(Assign);
				State = 40;
				((VarStmtContext)_localctx).Expression = expression(0);
				}
				break;
			case 5:
				_localctx = new ValStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 41;
				Match(Val);
				State = 42;
				((ValStmtContext)_localctx).VarName = Match(Name);
				State = 43;
				Match(Assign);
				State = 44;
				((ValStmtContext)_localctx).Expression = expression(0);
				}
				break;
			case 6:
				_localctx = new ValStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 45;
				Match(Val);
				State = 46;
				((ValStmtContext)_localctx).VarName = Match(Name);
				State = 47;
				Match(Colon);
				State = 48;
				((ValStmtContext)_localctx).Type = Match(Name);
				State = 49;
				Match(Assign);
				State = 50;
				((ValStmtContext)_localctx).Expression = expression(0);
				}
				break;
			case 7:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 51;
				Match(If);
				State = 52;
				Match(LRound);
				State = 53;
				((IfStmtContext)_localctx).Condition = expression(0);
				State = 54;
				Match(RRound);
				State = 55;
				((IfStmtContext)_localctx).TrueBody = statement();
				}
				break;
			case 8:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 57;
				Match(If);
				State = 58;
				Match(LRound);
				State = 59;
				((IfElseStmtContext)_localctx).Condition = expression(0);
				State = 60;
				Match(RRound);
				State = 61;
				((IfElseStmtContext)_localctx).TrueBody = statement();
				State = 62;
				Match(Else);
				State = 63;
				((IfElseStmtContext)_localctx).FalseBody = statement();
				}
				break;
			case 9:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 65;
				Match(While);
				State = 66;
				Match(LRound);
				State = 67;
				((WhileStmtContext)_localctx).Condition = expression(0);
				State = 68;
				Match(RRound);
				State = 69;
				((WhileStmtContext)_localctx).WhileBody = statement();
				}
				break;
			case 10:
				_localctx = new LoopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 71;
				Match(Loop);
				State = 72;
				Match(LRound);
				State = 73;
				((LoopStmtContext)_localctx).LoopTimes = expression(0);
				State = 74;
				Match(RRound);
				State = 75;
				((LoopStmtContext)_localctx).LoopBody = statement();
				}
				break;
			case 11:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 77;
				Match(Return);
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 78;
					((ReturnStmtContext)_localctx).Result = expression(0);
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new AssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 81;
				((AssignStmtContext)_localctx).Left = expression(0);
				State = 82;
				((AssignStmtContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Assign) ) {
					((AssignStmtContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 83;
				((AssignStmtContext)_localctx).Right = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompareExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken op;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eql() { return GetToken(MigxnLanguage.Eql, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ueql() { return GetToken(MigxnLanguage.Ueql, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cgt() { return GetToken(MigxnLanguage.Cgt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cge() { return GetToken(MigxnLanguage.Cge, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Clt() { return GetToken(MigxnLanguage.Clt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cle() { return GetToken(MigxnLanguage.Cle, 0); }
		public CompareExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken op;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(MigxnLanguage.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(MigxnLanguage.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rem() { return GetToken(MigxnLanguage.Rem, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(MigxnLanguage.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(MigxnLanguage.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(MigxnLanguage.Sub, 0); }
		public BinaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRound() { return GetToken(MigxnLanguage.LRound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRound() { return GetToken(MigxnLanguage.RRound, 0); }
		public ParenthesesExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExprContext : ExpressionContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(MigxnLanguage.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(MigxnLanguage.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(MigxnLanguage.Name, 0); }
		public SingleExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.EnterSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnLanguageListener typedListener = listener as IMigxnLanguageListener;
			if (typedListener != null) typedListener.ExitSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnLanguageVisitor<TResult> typedVisitor = visitor as IMigxnLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LRound:
				{
				_localctx = new ParenthesesExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 88;
				Match(LRound);
				State = 89;
				expression(0);
				State = 90;
				Match(RRound);
				}
				break;
			case Integer:
			case Float:
			case Name:
				{
				_localctx = new SingleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92;
				((SingleExprContext)_localctx).Value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131120L) != 0)) ) {
					((SingleExprContext)_localctx).Value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 95;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 96;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 97;
						((BinaryExprContext)_localctx).Right = expression(6);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 98;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 99;
						((BinaryExprContext)_localctx).op = Match(Pow);
						State = 100;
						((BinaryExprContext)_localctx).Right = expression(4);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 101;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 102;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Sub) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 103;
						((BinaryExprContext)_localctx).Right = expression(4);
						}
						break;
					case 4:
						{
						_localctx = new CompareExprContext(new ExpressionContext(_parentctx, _parentState));
						((CompareExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 104;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 105;
						((CompareExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
							((CompareExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106;
						((CompareExprContext)_localctx).Right = expression(3);
						}
						break;
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,113,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,5,2,22,8,2,10,2,12,2,25,9,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,80,8,2,1,2,1,
		2,1,2,1,2,3,2,86,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,94,8,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,108,8,3,10,3,12,3,111,9,3,1,3,0,
		1,6,4,0,2,4,6,0,5,1,0,34,34,2,0,4,5,17,17,1,0,37,39,1,0,35,36,1,0,28,33,
		126,0,8,1,0,0,0,2,10,1,0,0,0,4,85,1,0,0,0,6,93,1,0,0,0,8,9,3,2,1,0,9,1,
		1,0,0,0,10,11,5,11,0,0,11,12,5,17,0,0,12,13,5,23,0,0,13,14,5,24,0,0,14,
		15,5,21,0,0,15,16,5,17,0,0,16,17,5,27,0,0,17,18,3,4,2,0,18,3,1,0,0,0,19,
		23,5,25,0,0,20,22,3,4,2,0,21,20,1,0,0,0,22,25,1,0,0,0,23,21,1,0,0,0,23,
		24,1,0,0,0,24,26,1,0,0,0,25,23,1,0,0,0,26,86,5,26,0,0,27,28,5,8,0,0,28,
		29,5,17,0,0,29,30,5,34,0,0,30,86,3,6,3,0,31,32,5,8,0,0,32,33,5,17,0,0,
		33,34,5,21,0,0,34,86,5,17,0,0,35,36,5,8,0,0,36,37,5,17,0,0,37,38,5,21,
		0,0,38,39,5,17,0,0,39,40,5,34,0,0,40,86,3,6,3,0,41,42,5,9,0,0,42,43,5,
		17,0,0,43,44,5,34,0,0,44,86,3,6,3,0,45,46,5,9,0,0,46,47,5,17,0,0,47,48,
		5,21,0,0,48,49,5,17,0,0,49,50,5,34,0,0,50,86,3,6,3,0,51,52,5,12,0,0,52,
		53,5,23,0,0,53,54,3,6,3,0,54,55,5,24,0,0,55,56,3,4,2,0,56,86,1,0,0,0,57,
		58,5,12,0,0,58,59,5,23,0,0,59,60,3,6,3,0,60,61,5,24,0,0,61,62,3,4,2,0,
		62,63,5,13,0,0,63,64,3,4,2,0,64,86,1,0,0,0,65,66,5,15,0,0,66,67,5,23,0,
		0,67,68,3,6,3,0,68,69,5,24,0,0,69,70,3,4,2,0,70,86,1,0,0,0,71,72,5,14,
		0,0,72,73,5,23,0,0,73,74,3,6,3,0,74,75,5,24,0,0,75,76,3,4,2,0,76,86,1,
		0,0,0,77,79,5,16,0,0,78,80,3,6,3,0,79,78,1,0,0,0,79,80,1,0,0,0,80,86,1,
		0,0,0,81,82,3,6,3,0,82,83,7,0,0,0,83,84,3,6,3,0,84,86,1,0,0,0,85,19,1,
		0,0,0,85,27,1,0,0,0,85,31,1,0,0,0,85,35,1,0,0,0,85,41,1,0,0,0,85,45,1,
		0,0,0,85,51,1,0,0,0,85,57,1,0,0,0,85,65,1,0,0,0,85,71,1,0,0,0,85,77,1,
		0,0,0,85,81,1,0,0,0,86,5,1,0,0,0,87,88,6,3,-1,0,88,89,5,23,0,0,89,90,3,
		6,3,0,90,91,5,24,0,0,91,94,1,0,0,0,92,94,7,1,0,0,93,87,1,0,0,0,93,92,1,
		0,0,0,94,109,1,0,0,0,95,96,10,5,0,0,96,97,7,2,0,0,97,108,3,6,3,6,98,99,
		10,4,0,0,99,100,5,18,0,0,100,108,3,6,3,4,101,102,10,3,0,0,102,103,7,3,
		0,0,103,108,3,6,3,4,104,105,10,2,0,0,105,106,7,4,0,0,106,108,3,6,3,3,107,
		95,1,0,0,0,107,98,1,0,0,0,107,101,1,0,0,0,107,104,1,0,0,0,108,111,1,0,
		0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,7,1,0,0,0,111,109,1,0,0,0,6,23,
		79,85,93,107,109
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
