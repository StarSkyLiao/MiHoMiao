//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/C#Library/MiHoMiao/MiHoMiao.Migxn/Antlr/Definition/MigxnParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace MiHoMiao.Migxn.Antlr.Generated;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MigxnParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SingleLintComment=1, MultiLineComment=2, WhiteSpace=3, Import=4, Export=5, 
		From=6, With=7, Public=8, Global=9, Asmbly=10, Family=11, Intern=12, Native=13, 
		ValType=14, Secured=15, Virtual=16, Concept=17, Toolset=18, Feature=19, 
		Var=20, Val=21, Let=22, Fun=23, Get=24, Set=25, If=26, Else=27, And=28, 
		Or=29, Not=30, Is=31, As=32, Goto=33, Label=34, Loop=35, While=36, Pass=37, 
		Break=38, Return=39, Identifier=40, LITERAL_ACCESS=41, IntegerLiteral=42, 
		HexIntegerLiteral=43, BinIntegerLiteral=44, RealNumberLiteal=45, CharLiteral=46, 
		StringLiteral=47, VerbatimString=48, OpenBrace=49, CloseBrace=50, OpenBracket=51, 
		CloseBracket=52, OpenParens=53, CloseParens=54, Dot=55, Comma=56, Colon=57, 
		SemiColon=58, Add=59, Sub=60, Mul=61, Div=62, Rem=63, LogicAnd=64, LogicOr=65, 
		LogicXor=66, Bang=67, Tilde=68, Assign=69, Interr=70, DoubleColon=71, 
		Inc=72, Dec=73, Arrow=74, Ceq=75, Cneq=76, Cle=77, Cge=78, Clt=79, Cgt=80, 
		AddAssign=81, SubAssign=82, MulAssign=83, DivAssign=84, RemAssign=85, 
		AndAssign=86, OrAssign=87, XorAssign=88, Shl=89, Shr=90, NullAssign=91;
	public const int
		RULE_expression = 0;
	public static readonly string[] ruleNames = {
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'import'", "'export'", "'from'", "'with'", "'public'", 
		"'global'", "'asmbly'", "'family'", "'intern'", "'native'", "'valtype'", 
		"'secured'", "'virtual'", "'concept'", "'toolset'", "'feature'", "'var'", 
		"'val'", "'let'", "'fun'", "'get'", "'set'", "'if'", "'else'", "'and'", 
		"'or'", "'not'", "'is'", "'as'", "'goto'", "'label::'", "'loop'", "'while'", 
		"'pass'", "'break'", "'ret'", null, null, null, null, null, null, null, 
		null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", 
		"';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", 
		"'~'", "'='", "'?'", "'::'", "'++'", "'--'", "'->'", "'=='", "'!='", "'<='", 
		"'>='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'|='", "'^='", "'<<'", "'>>'", "'??='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLintComment", "MultiLineComment", "WhiteSpace", "Import", 
		"Export", "From", "With", "Public", "Global", "Asmbly", "Family", "Intern", 
		"Native", "ValType", "Secured", "Virtual", "Concept", "Toolset", "Feature", 
		"Var", "Val", "Let", "Fun", "Get", "Set", "If", "Else", "And", "Or", "Not", 
		"Is", "As", "Goto", "Label", "Loop", "While", "Pass", "Break", "Return", 
		"Identifier", "LITERAL_ACCESS", "IntegerLiteral", "HexIntegerLiteral", 
		"BinIntegerLiteral", "RealNumberLiteal", "CharLiteral", "StringLiteral", 
		"VerbatimString", "OpenBrace", "CloseBrace", "OpenBracket", "CloseBracket", 
		"OpenParens", "CloseParens", "Dot", "Comma", "Colon", "SemiColon", "Add", 
		"Sub", "Mul", "Div", "Rem", "LogicAnd", "LogicOr", "LogicXor", "Bang", 
		"Tilde", "Assign", "Interr", "DoubleColon", "Inc", "Dec", "Arrow", "Ceq", 
		"Cneq", "Cle", "Cge", "Clt", "Cgt", "AddAssign", "SubAssign", "MulAssign", 
		"DivAssign", "RemAssign", "AndAssign", "OrAssign", "XorAssign", "Shl", 
		"Shr", "NullAssign"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MigxnParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MigxnParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MigxnParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MigxnParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleExprContext : ExpressionContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(MigxnParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RealNumberLiteal() { return GetToken(MigxnParser.RealNumberLiteal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharLiteral() { return GetToken(MigxnParser.CharLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MigxnParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimString() { return GetToken(MigxnParser.VerbatimString, 0); }
		public SingleExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnParserListener typedListener = listener as IMigxnParserListener;
			if (typedListener != null) typedListener.EnterSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnParserListener typedListener = listener as IMigxnParserListener;
			if (typedListener != null) typedListener.ExitSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnParserVisitor<TResult> typedVisitor = visitor as IMigxnParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		int _la;
		try {
			_localctx = new SingleExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 2;
			((SingleExprContext)_localctx).Value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 532163627843584L) != 0)) ) {
				((SingleExprContext)_localctx).Value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,91,5,2,0,7,0,1,0,1,0,1,0,0,0,1,0,0,1,2,0,42,42,45,48,3,0,2,1,0,0,0,
		2,3,7,0,0,0,3,1,1,0,0,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
