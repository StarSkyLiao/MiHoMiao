//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/07Programing/0510 MiHoMiao/MiHoMiao/MiHoMiao.Migxn/Antlr/Grammar/MigxnExpr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace MiHoMiao.Migxn.Antlr.Auto;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMigxnExprListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MigxnExprBaseListener : IMigxnExprListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpr([NotNull] MigxnExpr.BinaryExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpr([NotNull] MigxnExpr.BinaryExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AndOrExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndOrExpr([NotNull] MigxnExpr.AndOrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AndOrExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndOrExpr([NotNull] MigxnExpr.AndOrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesesExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesesExpr([NotNull] MigxnExpr.ParenthesesExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesesExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesesExpr([NotNull] MigxnExpr.ParenthesesExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SingleExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSingleExpr([NotNull] MigxnExpr.SingleExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SingleExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSingleExpr([NotNull] MigxnExpr.SingleExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleExpr([NotNull] MigxnExpr.TupleExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleExpr</c>
	/// labeled alternative in <see cref="MigxnExpr.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleExpr([NotNull] MigxnExpr.TupleExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MigxnExpr.tupleListExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleListExpr([NotNull] MigxnExpr.TupleListExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MigxnExpr.tupleListExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleListExpr([NotNull] MigxnExpr.TupleListExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DecIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecIntLiteral([NotNull] MigxnExpr.DecIntLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DecIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecIntLiteral([NotNull] MigxnExpr.DecIntLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>HexIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHexIntLiteral([NotNull] MigxnExpr.HexIntLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>HexIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHexIntLiteral([NotNull] MigxnExpr.HexIntLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinIntLiteral([NotNull] MigxnExpr.BinIntLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinIntLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinIntLiteral([NotNull] MigxnExpr.BinIntLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CharLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharLiteral([NotNull] MigxnExpr.CharLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CharLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharLiteral([NotNull] MigxnExpr.CharLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.float"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatLiteral([NotNull] MigxnExpr.FloatLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.float"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatLiteral([NotNull] MigxnExpr.FloatLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ExponentLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.float"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExponentLiteral([NotNull] MigxnExpr.ExponentLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExponentLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.float"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExponentLiteral([NotNull] MigxnExpr.ExponentLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NormalStringLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNormalStringLiteral([NotNull] MigxnExpr.NormalStringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NormalStringLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNormalStringLiteral([NotNull] MigxnExpr.NormalStringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VerbatimStringLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVerbatimStringLiteral([NotNull] MigxnExpr.VerbatimStringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VerbatimStringLiteral</c>
	/// labeled alternative in <see cref="MigxnExpr.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVerbatimStringLiteral([NotNull] MigxnExpr.VerbatimStringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MigxnExpr.namespace_or_typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespace_or_typeName([NotNull] MigxnExpr.Namespace_or_typeNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MigxnExpr.namespace_or_typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespace_or_typeName([NotNull] MigxnExpr.Namespace_or_typeNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MigxnExpr.type_argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_argument_list([NotNull] MigxnExpr.Type_argument_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MigxnExpr.type_argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_argument_list([NotNull] MigxnExpr.Type_argument_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MigxnExpr.fullType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFullType([NotNull] MigxnExpr.FullTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MigxnExpr.fullType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFullType([NotNull] MigxnExpr.FullTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NamedType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedType([NotNull] MigxnExpr.NamedTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NamedType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedType([NotNull] MigxnExpr.NamedTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TupleType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleType([NotNull] MigxnExpr.TupleTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TupleType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleType([NotNull] MigxnExpr.TupleTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>KeywordType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeywordType([NotNull] MigxnExpr.KeywordTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>KeywordType</c>
	/// labeled alternative in <see cref="MigxnExpr.baseType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeywordType([NotNull] MigxnExpr.KeywordTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MigxnExpr.tupleElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleElement([NotNull] MigxnExpr.TupleElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MigxnExpr.tupleElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleElement([NotNull] MigxnExpr.TupleElementContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
