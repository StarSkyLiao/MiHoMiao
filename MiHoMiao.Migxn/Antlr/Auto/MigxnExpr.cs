//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/C#Library/MiHoMiao/MiHoMiao.Migxn/Antlr/Grammar/MigxnExpr.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace MiHoMiao.Migxn.Antlr.Auto;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MigxnExpr : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SingleLintComment=1, MultiLineComment=2, WhiteSpace=3, Import=4, Export=5, 
		From=6, With=7, Public=8, Global=9, Asmbly=10, Family=11, Intern=12, Native=13, 
		ValType=14, Secured=15, Virtual=16, Concept=17, Toolset=18, Feature=19, 
		Var=20, Val=21, Let=22, Fun=23, Get=24, Set=25, If=26, Else=27, And=28, 
		Or=29, Not=30, Is=31, As=32, Goto=33, Label=34, Loop=35, While=36, Pass=37, 
		Break=38, Return=39, Bool=40, Char=41, I32=42, I64=43, R32=44, R64=45, 
		String=46, Any=47, Identifier=48, LITERAL_ACCESS=49, CharLiteral=50, IntegerLiteral=51, 
		HexIntegerLiteral=52, BinIntegerLiteral=53, FloatNumberLiteal=54, ExponentFloatLiteal=55, 
		StringLiteral=56, VerbatimString=57, OpenBrace=58, CloseBrace=59, OpenBracket=60, 
		CloseBracket=61, OpenParens=62, CloseParens=63, Dot=64, Comma=65, Colon=66, 
		SemiColon=67, Add=68, Sub=69, Mul=70, Div=71, Rem=72, Pow=73, LogicAnd=74, 
		LogicOr=75, LogicXor=76, Bang=77, Tilde=78, Assign=79, Interr=80, DoubleColon=81, 
		Inc=82, Dec=83, Arrow=84, Ceq=85, Cneq=86, Cle=87, Cge=88, Clt=89, Cgt=90, 
		AddAssign=91, SubAssign=92, MulAssign=93, DivAssign=94, RemAssign=95, 
		AndAssign=96, OrAssign=97, XorAssign=98, Shl=99, Shr=100, NullAssign=101;
	public const int
		RULE_expression = 0, RULE_paramList = 1, RULE_integer = 2, RULE_float = 3, 
		RULE_string = 4, RULE_namespace_or_typeName = 5, RULE_type_argument_list = 6, 
		RULE_fullType = 7, RULE_baseType = 8, RULE_tupleElement = 9;
	public static readonly string[] ruleNames = {
		"expression", "paramList", "integer", "float", "string", "namespace_or_typeName", 
		"type_argument_list", "fullType", "baseType", "tupleElement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'import'", "'export'", "'from'", "'with'", "'public'", 
		"'global'", "'asmbly'", "'family'", "'intern'", "'native'", "'valtype'", 
		"'secured'", "'virtual'", "'concept'", "'toolset'", "'feature'", "'var'", 
		"'val'", "'let'", "'fun'", "'get'", "'set'", "'if'", "'else'", "'and'", 
		"'or'", "'not'", "'is'", "'as'", "'goto'", "'label::'", "'loop'", "'while'", 
		"'pass'", "'break'", "'ret'", "'bool'", "'char'", "'i32'", "'i64'", "'f32'", 
		"'f64'", "'string'", "'any'", null, null, null, null, null, null, null, 
		null, null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", 
		"':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'&'", "'|'", 
		"'^'", "'!'", "'~'", "'='", "'?'", "'::'", "'++'", "'--'", "'->'", "'=='", 
		"'!='", "'<='", "'>='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'|='", "'^='", "'<<'", "'>>'", "'??='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleLintComment", "MultiLineComment", "WhiteSpace", "Import", 
		"Export", "From", "With", "Public", "Global", "Asmbly", "Family", "Intern", 
		"Native", "ValType", "Secured", "Virtual", "Concept", "Toolset", "Feature", 
		"Var", "Val", "Let", "Fun", "Get", "Set", "If", "Else", "And", "Or", "Not", 
		"Is", "As", "Goto", "Label", "Loop", "While", "Pass", "Break", "Return", 
		"Bool", "Char", "I32", "I64", "R32", "R64", "String", "Any", "Identifier", 
		"LITERAL_ACCESS", "CharLiteral", "IntegerLiteral", "HexIntegerLiteral", 
		"BinIntegerLiteral", "FloatNumberLiteal", "ExponentFloatLiteal", "StringLiteral", 
		"VerbatimString", "OpenBrace", "CloseBrace", "OpenBracket", "CloseBracket", 
		"OpenParens", "CloseParens", "Dot", "Comma", "Colon", "SemiColon", "Add", 
		"Sub", "Mul", "Div", "Rem", "Pow", "LogicAnd", "LogicOr", "LogicXor", 
		"Bang", "Tilde", "Assign", "Interr", "DoubleColon", "Inc", "Dec", "Arrow", 
		"Ceq", "Cneq", "Cle", "Cge", "Clt", "Cgt", "AddAssign", "SubAssign", "MulAssign", 
		"DivAssign", "RemAssign", "AndAssign", "OrAssign", "XorAssign", "Shl", 
		"Shr", "NullAssign"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MigxnExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MigxnExpr() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MigxnExpr(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MigxnExpr(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken op;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(MigxnExpr.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(MigxnExpr.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rem() { return GetToken(MigxnExpr.Rem, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(MigxnExpr.Pow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(MigxnExpr.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(MigxnExpr.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cgt() { return GetToken(MigxnExpr.Cgt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cge() { return GetToken(MigxnExpr.Cge, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Clt() { return GetToken(MigxnExpr.Clt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cle() { return GetToken(MigxnExpr.Cle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ceq() { return GetToken(MigxnExpr.Ceq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cneq() { return GetToken(MigxnExpr.Cneq, 0); }
		public BinaryExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOrExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken op;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(MigxnExpr.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(MigxnExpr.Or, 0); }
		public AndOrExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterAndOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitAndOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParamListExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ParamListExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterParamListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitParamListExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParens() { return GetToken(MigxnExpr.OpenParens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParens() { return GetToken(MigxnExpr.CloseParens, 0); }
		public ParenthesesExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_typeNameContext namespace_or_typeName() {
			return GetRuleContext<Namespace_or_typeNameContext>(0);
		}
		public SingleExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitSingleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new ParenthesesExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 21;
				Match(OpenParens);
				State = 22;
				expression(0);
				State = 23;
				Match(CloseParens);
				}
				break;
			case 2:
				{
				_localctx = new ParamListExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25;
				paramList();
				}
				break;
			case 3:
				{
				_localctx = new SingleExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CharLiteral:
				case IntegerLiteral:
				case HexIntegerLiteral:
				case BinIntegerLiteral:
					{
					State = 26;
					integer();
					}
					break;
				case FloatNumberLiteal:
				case ExponentFloatLiteal:
					{
					State = 27;
					@float();
					}
					break;
				case StringLiteral:
				case VerbatimString:
					{
					State = 28;
					@string();
					}
					break;
				case Identifier:
					{
					State = 29;
					namespace_or_typeName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 54;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 52;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 34;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 35;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 7L) != 0)) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 36;
						((BinaryExprContext)_localctx).Right = expression(9);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 37;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 38;
						((BinaryExprContext)_localctx).op = Match(Pow);
						State = 39;
						((BinaryExprContext)_localctx).Right = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 40;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 41;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Sub) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42;
						((BinaryExprContext)_localctx).Right = expression(7);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 43;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 44;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 15L) != 0)) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45;
						((BinaryExprContext)_localctx).Right = expression(6);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 46;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 47;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Ceq || _la==Cneq) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 48;
						((BinaryExprContext)_localctx).Right = expression(5);
						}
						break;
					case 6:
						{
						_localctx = new AndOrExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndOrExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 49;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 50;
						((AndOrExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
							((AndOrExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 51;
						((AndOrExprContext)_localctx).Right = expression(4);
						}
						break;
					}
					} 
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParens() { return GetToken(MigxnExpr.OpenParens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParens() { return GetToken(MigxnExpr.CloseParens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MigxnExpr.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MigxnExpr.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 2, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(OpenParens);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4899071969648967680L) != 0)) {
				{
				State = 58;
				expression(0);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 59;
					Match(Comma);
					State = 60;
					expression(0);
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 68;
			Match(CloseParens);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	 
		public IntegerContext() { }
		public virtual void CopyFrom(IntegerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinIntLiteralContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinIntegerLiteral() { return GetToken(MigxnExpr.BinIntegerLiteral, 0); }
		public BinIntLiteralContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterBinIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitBinIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharLiteralContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharLiteral() { return GetToken(MigxnExpr.CharLiteral, 0); }
		public CharLiteralContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitCharLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexIntLiteralContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(MigxnExpr.HexIntegerLiteral, 0); }
		public HexIntLiteralContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterHexIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitHexIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecIntLiteralContext : IntegerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(MigxnExpr.IntegerLiteral, 0); }
		public DecIntLiteralContext(IntegerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterDecIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitDecIntLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 4, RULE_integer);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				_localctx = new DecIntLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				Match(IntegerLiteral);
				}
				break;
			case HexIntegerLiteral:
				_localctx = new HexIntLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				Match(HexIntegerLiteral);
				}
				break;
			case BinIntegerLiteral:
				_localctx = new BinIntLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				Match(BinIntegerLiteral);
				}
				break;
			case CharLiteral:
				_localctx = new CharLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				Match(CharLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
	 
		public FloatContext() { }
		public virtual void CopyFrom(FloatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatLiteralContext : FloatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatNumberLiteal() { return GetToken(MigxnExpr.FloatNumberLiteal, 0); }
		public FloatLiteralContext(FloatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentLiteralContext : FloatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExponentFloatLiteal() { return GetToken(MigxnExpr.ExponentFloatLiteal, 0); }
		public ExponentLiteralContext(FloatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterExponentLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitExponentLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 6, RULE_float);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FloatNumberLiteal:
				_localctx = new FloatLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				Match(FloatNumberLiteal);
				}
				break;
			case ExponentFloatLiteal:
				_localctx = new ExponentLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				Match(ExponentFloatLiteal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	 
		public StringContext() { }
		public virtual void CopyFrom(StringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VerbatimStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VerbatimString() { return GetToken(MigxnExpr.VerbatimString, 0); }
		public VerbatimStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterVerbatimStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitVerbatimStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbatimStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalStringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MigxnExpr.StringLiteral, 0); }
		public NormalStringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterNormalStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitNormalStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 8, RULE_string);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				_localctx = new NormalStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(StringLiteral);
				}
				break;
			case VerbatimString:
				_localctx = new VerbatimStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(VerbatimString);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_typeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(MigxnExpr.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(MigxnExpr.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(MigxnExpr.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(MigxnExpr.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_typeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterNamespace_or_typeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitNamespace_or_typeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_typeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_typeNameContext namespace_or_typeName() {
		Namespace_or_typeNameContext _localctx = new Namespace_or_typeNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespace_or_typeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 84;
			Match(Identifier);
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 85;
				type_argument_list();
				}
				break;
			}
			}
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 88;
					Match(Dot);
					State = 89;
					Match(Identifier);
					State = 91;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						State = 90;
						type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Clt() { return GetToken(MigxnExpr.Clt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullTypeContext[] fullType() {
			return GetRuleContexts<FullTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullTypeContext fullType(int i) {
			return GetRuleContext<FullTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cgt() { return GetToken(MigxnExpr.Cgt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MigxnExpr.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MigxnExpr.Comma, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(Clt);
			State = 99;
			fullType();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 100;
				Match(Comma);
				State = 101;
				fullType();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(Cgt);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Interr() { return GetTokens(MigxnExpr.Interr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interr(int i) {
			return GetToken(MigxnExpr.Interr, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpenBracket() { return GetTokens(MigxnExpr.OpenBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket(int i) {
			return GetToken(MigxnExpr.OpenBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CloseBracket() { return GetTokens(MigxnExpr.CloseBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket(int i) {
			return GetToken(MigxnExpr.CloseBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mul() { return GetTokens(MigxnExpr.Mul); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul(int i) {
			return GetToken(MigxnExpr.Mul, i);
		}
		public FullTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterFullType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitFullType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullTypeContext fullType() {
		FullTypeContext _localctx = new FullTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_fullType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			baseType();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 1049601L) != 0)) {
				{
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Interr:
					{
					State = 110;
					Match(Interr);
					}
					break;
				case OpenBracket:
					{
					State = 111;
					Match(OpenBracket);
					State = 112;
					Match(CloseBracket);
					}
					break;
				case Mul:
					{
					State = 113;
					Match(Mul);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
	 
		public BaseTypeContext() { }
		public virtual void CopyFrom(BaseTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeywordTypeContext : BaseTypeContext {
		public IToken Keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(MigxnExpr.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(MigxnExpr.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(MigxnExpr.I32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(MigxnExpr.I64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R32() { return GetToken(MigxnExpr.R32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R64() { return GetToken(MigxnExpr.R64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(MigxnExpr.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(MigxnExpr.Any, 0); }
		public KeywordTypeContext(BaseTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterKeywordType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitKeywordType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedTypeContext : BaseTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_typeNameContext namespace_or_typeName() {
			return GetRuleContext<Namespace_or_typeNameContext>(0);
		}
		public NamedTypeContext(BaseTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : BaseTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParens() { return GetToken(MigxnExpr.OpenParens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementContext[] tupleElement() {
			return GetRuleContexts<TupleElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementContext tupleElement(int i) {
			return GetRuleContext<TupleElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParens() { return GetToken(MigxnExpr.CloseParens, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(MigxnExpr.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(MigxnExpr.Comma, i);
		}
		public TupleTypeContext(BaseTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_baseType);
		int _la;
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				_localctx = new NamedTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				namespace_or_typeName();
				}
				break;
			case OpenParens:
				_localctx = new TupleTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(OpenParens);
				State = 121;
				tupleElement();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 122;
					Match(Comma);
					State = 123;
					tupleElement();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 128;
				Match(CloseParens);
				}
				break;
			case Bool:
			case Char:
			case I32:
			case I64:
			case R32:
			case R64:
			case String:
			case Any:
				_localctx = new KeywordTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				((KeywordTypeContext)_localctx).Keyword = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 280375465082880L) != 0)) ) {
					((KeywordTypeContext)_localctx).Keyword = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullTypeContext fullType() {
			return GetRuleContext<FullTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MigxnExpr.Identifier, 0); }
		public TupleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.EnterTupleElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMigxnExprListener typedListener = listener as IMigxnExprListener;
			if (typedListener != null) typedListener.ExitTupleElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMigxnExprVisitor<TResult> typedVisitor = visitor as IMigxnExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementContext tupleElement() {
		TupleElementContext _localctx = new TupleElementContext(Context, State);
		EnterRule(_localctx, 18, RULE_tupleElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			fullType();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 134;
				Match(Identifier);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,101,138,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,31,8,
		0,3,0,33,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,1,1,1,1,1,1,1,5,1,62,8,1,10,
		1,12,1,65,9,1,3,1,67,8,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,75,8,2,1,3,1,3,3,
		3,79,8,3,1,4,1,4,3,4,83,8,4,1,5,1,5,3,5,87,8,5,1,5,1,5,1,5,3,5,92,8,5,
		5,5,94,8,5,10,5,12,5,97,9,5,1,6,1,6,1,6,1,6,5,6,103,8,6,10,6,12,6,106,
		9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,115,8,7,10,7,12,7,118,9,7,1,8,1,8,
		1,8,1,8,1,8,4,8,125,8,8,11,8,12,8,126,1,8,1,8,1,8,3,8,132,8,8,1,9,1,9,
		3,9,136,8,9,1,9,0,1,0,10,0,2,4,6,8,10,12,14,16,18,0,6,1,0,70,72,1,0,68,
		69,1,0,87,90,1,0,85,86,1,0,28,29,1,0,40,47,156,0,32,1,0,0,0,2,57,1,0,0,
		0,4,74,1,0,0,0,6,78,1,0,0,0,8,82,1,0,0,0,10,84,1,0,0,0,12,98,1,0,0,0,14,
		109,1,0,0,0,16,131,1,0,0,0,18,133,1,0,0,0,20,21,6,0,-1,0,21,22,5,62,0,
		0,22,23,3,0,0,0,23,24,5,63,0,0,24,33,1,0,0,0,25,33,3,2,1,0,26,31,3,4,2,
		0,27,31,3,6,3,0,28,31,3,8,4,0,29,31,3,10,5,0,30,26,1,0,0,0,30,27,1,0,0,
		0,30,28,1,0,0,0,30,29,1,0,0,0,31,33,1,0,0,0,32,20,1,0,0,0,32,25,1,0,0,
		0,32,30,1,0,0,0,33,54,1,0,0,0,34,35,10,8,0,0,35,36,7,0,0,0,36,53,3,0,0,
		9,37,38,10,7,0,0,38,39,5,73,0,0,39,53,3,0,0,7,40,41,10,6,0,0,41,42,7,1,
		0,0,42,53,3,0,0,7,43,44,10,5,0,0,44,45,7,2,0,0,45,53,3,0,0,6,46,47,10,
		4,0,0,47,48,7,3,0,0,48,53,3,0,0,5,49,50,10,3,0,0,50,51,7,4,0,0,51,53,3,
		0,0,4,52,34,1,0,0,0,52,37,1,0,0,0,52,40,1,0,0,0,52,43,1,0,0,0,52,46,1,
		0,0,0,52,49,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,1,1,0,
		0,0,56,54,1,0,0,0,57,66,5,62,0,0,58,63,3,0,0,0,59,60,5,65,0,0,60,62,3,
		0,0,0,61,59,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,67,1,
		0,0,0,65,63,1,0,0,0,66,58,1,0,0,0,66,67,1,0,0,0,67,68,1,0,0,0,68,69,5,
		63,0,0,69,3,1,0,0,0,70,75,5,51,0,0,71,75,5,52,0,0,72,75,5,53,0,0,73,75,
		5,50,0,0,74,70,1,0,0,0,74,71,1,0,0,0,74,72,1,0,0,0,74,73,1,0,0,0,75,5,
		1,0,0,0,76,79,5,54,0,0,77,79,5,55,0,0,78,76,1,0,0,0,78,77,1,0,0,0,79,7,
		1,0,0,0,80,83,5,56,0,0,81,83,5,57,0,0,82,80,1,0,0,0,82,81,1,0,0,0,83,9,
		1,0,0,0,84,86,5,48,0,0,85,87,3,12,6,0,86,85,1,0,0,0,86,87,1,0,0,0,87,95,
		1,0,0,0,88,89,5,64,0,0,89,91,5,48,0,0,90,92,3,12,6,0,91,90,1,0,0,0,91,
		92,1,0,0,0,92,94,1,0,0,0,93,88,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,
		96,1,0,0,0,96,11,1,0,0,0,97,95,1,0,0,0,98,99,5,89,0,0,99,104,3,14,7,0,
		100,101,5,65,0,0,101,103,3,14,7,0,102,100,1,0,0,0,103,106,1,0,0,0,104,
		102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,0,107,108,5,
		90,0,0,108,13,1,0,0,0,109,116,3,16,8,0,110,115,5,80,0,0,111,112,5,60,0,
		0,112,115,5,61,0,0,113,115,5,70,0,0,114,110,1,0,0,0,114,111,1,0,0,0,114,
		113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,15,1,0,
		0,0,118,116,1,0,0,0,119,132,3,10,5,0,120,121,5,62,0,0,121,124,3,18,9,0,
		122,123,5,65,0,0,123,125,3,18,9,0,124,122,1,0,0,0,125,126,1,0,0,0,126,
		124,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,63,0,0,129,132,1,
		0,0,0,130,132,7,5,0,0,131,119,1,0,0,0,131,120,1,0,0,0,131,130,1,0,0,0,
		132,17,1,0,0,0,133,135,3,14,7,0,134,136,5,48,0,0,135,134,1,0,0,0,135,136,
		1,0,0,0,136,19,1,0,0,0,18,30,32,52,54,63,66,74,78,82,86,91,95,104,114,
		116,126,131,135
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
